#!/usr/bin/env bash

die() { echo "$@" >&2; exit 1; }

tac() {
  awk '{ a[i++] = $0 } END { for (j = i - 1; j >= 0; j--) print a[j] }'
}

get-addresses() {
  ifconfig \
    | awk '(/inet / && /broadcast/) || (/secured/ && !/scopeid/) { print $2 }' \
    | tac
}

get-host() {
  while read -r addr; do
    timeout 0.25 dig +short -x "$addr" 2>/dev/null | sed 's/\.$//'
  done < <( get-addresses ) | head -n 1
}

get-port() {
  local root port
  read -r root < <( realpath "$1" )
  read -r port < <( md5sum <<< "$root" | tr -cd '[:digit:]' | cut -c 1-3 | sed 's/^0*//' )
  (( port += 8000 ))
  echo "$port"
}

write-config() {
  local root="$1"
  local port="$2"

  local mime="/opt/homebrew/etc/nginx/mime.types"
  [[ -f "$mime" ]] || mime=/usr/local/etc/nginx/mime.types
  [[ -f "$mime" ]] || die "No mime.types configured"

  cat << EOF
worker_processes 1;
master_process   off;
daemon           off;
pid              /tmp/nginx-$port.pid;
error_log        /dev/stdout warn;

events {
    worker_connections 128;
}

http {
    log_format   logfmt '\$remote_addr [\$time_local] "\$request" \$status';
    include      $mime;
    sendfile     on;

    add_header Pragma public;
    add_header Cache-Control "public";

    server {
        listen       $port;
        listen       [::]:$port;
        root         $root;
        index        index.html;
        access_log   /dev/stdout logfmt;

        location / {
            try_files \$uri \$uri/ @htmlext;
        }
        location ~ \.html$ {
            try_files \$uri =404;
        }
        location @htmlext {
            rewrite ^(.*)$ \$1.html break;
        }
    }
}
EOF
}

main() {
  local root="${1:-$PWD}"
  [[ -d "$root" ]] || die "No such directory: $root"

  local host port config
  read -r host < <( get-host )
  [[ -n "$host" ]] || host="[::]"
  read -r port < <( get-port "$root" )

  local uri="http://$host:$port"
  command -v open >/dev/null && { sleep 0.5; open -u "$uri"; } &

  nc -z localhost "$port" 2>/dev/null && {
    echo "Already serving on $uri"
    return
  }

  echo "Serving on $uri"
  read -r config < <( mktemp )
  trap 'rm -f "$config"' EXIT
  write-config "$root" "$port" > "$config"

  nginx -c "$config" -e stderr
}

main "$@"
